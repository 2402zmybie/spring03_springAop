<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">

        <!--配置Spring的Ioc,把Service对象配置进来-->
    <bean id="accountService" class="com.hr.service.impl.AccountServiceImpl"></bean>

    <!--
       spring中基于XML的aop配置步骤
       1 把通知Bean也交给spring来管理
       2 使用aop:config标签表明开始AOP的配置
       3 使用aop:aspect标签来配置切面
            id属性:是给切面提供一个唯一标志
            ref属性: 是指定通知类bean的id
       4 在aop:aspect标签的内部使用对应的标签来配置通知的类型
            我们现在的示例是让printLog方法在切入点方法执行之前,所以是前置通知
            aop:before: 表示配置前置通知
                method属性: 用于指定Logger类中哪个方法是前置通知
                pointcut属性: 用于指定切入点表达式,该表达式的含义指的是对业务层中哪些方法进行增强

            切入点表达式写法:
                关键字: execution(表达式)
                表达式:
                    (访问修饰符 可以不写) 返回值 包名.包名.包名...类名.方法名(参数列表)
                    全通配写法: * *..*.*(..)
                  实际开发中,切入点表达式的通常写法:
                    切到业务类实现类下的所有方法:
                        * com.hr.service.impl.*.*(..)

       -->

    <bean id="logger" class="com.hr.service.utils.Logger"></bean>

    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <aop:pointcut id="pt1" expression="execution(* com.hr.service.impl.*.*(..))"/>

            <!--&lt;!&ndash;前置通知: 在切入点执行方法之前执行&ndash;&gt;
            <aop:before method="beforPrintLog" pointcut-ref="pt1"></aop:before>
            &lt;!&ndash;后置通知: 在切入点方法正常执行之后&ndash;&gt;
            <aop:after-returning method="afterReturnPrintLog" pointcut-ref="pt1"></aop:after-returning>
            &lt;!&ndash;异常通知: 在切入点方法产生异常之后执行&ndash;&gt;
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>
            &lt;!&ndash;最终通知: 无论切入点方法是否正常执行它都会在其后面执行 &ndash;&gt;
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->


            <!--配置环绕通知 详细的注释请看Logger类中-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>


        </aop:aspect>
    </aop:config>

</beans>